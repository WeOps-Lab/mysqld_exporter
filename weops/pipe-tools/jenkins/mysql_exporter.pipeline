pipeline {
    agent {
        node('chaos')
    }

    parameters {
       string(name: 'BranchName', defaultValue: 'dev', description: null)
       string(name: 'GitTag', defaultValue: 'dev', description: null)
       string(name: 'BuildPath', defaultValue: 'weops/pipe-tools/bin', description: 'The path to build binaries')
    }

    environment {
       PATH = "/data/go/bin:${env.PATH}"
    }

    stages {
        stage('拉取代码') {
            steps {
                git url: 'https://proxy.zyun.vip/https://github.com/WeOps-Lab/mysqld_exporter', branch: "weops/${env.BranchName}"
            }
        }

        stage('部署监控对象') {
            steps {
                dir('weops/pipe-tools/charts') {
                    sh 'bash helm_uninstall.sh'
                    sleep 1
                    sh 'bash helm_install.sh'
                }
            }
        }

        stage('编译探针'){
          steps {
            script {
              def buildOptions = [
                "linux_amd64": "GOOS=linux GOARCH=amd64",
                "windows_amd64": ["GOOS=windows", "GOARCH=amd64", "EXTENSION=.exe"],
                "linux_arm64": "GOOS=linux GOARCH=arm64"
              ]
              parallel buildOptions.collectEntries { arch, options ->
                [(arch): {
                  sh "go env -w GOPROXY=https://goproxy.cn"
                  sh "${options.join(' ')} go build -o ${env.BuildPath}/mysql_exporter_${arch}${options.EXTENSION ?: ''}"
                }]
              }
            }
          }
        }


        stage('构建镜像和推送镜像') {
            steps {
                dir("${env.BuildPath}") {
                    sh 'docker build --no-cache  -f ../docker/Dockerfile -t registry-svc:25000/library/mysql-exporter:latest .'
                    sh 'docker push registry-svc:25000/library/mysql-exporter:latest'
                }
            }
        }

        stage('生成部署文件并部署探针和混沌工程') {
            steps {
                script {
                    def components = ["mysql", "mariadb"]
                    components.each { component ->
                        dir("weops/pipe-tools/exporter/${component}/template") {
                            sh 'bash build.sh'
                        }
                    }
                }

                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'chaos', namespace: '', serverUrl: 'https://10.10.90.113:6443') {
                    script {
                        def components = ["mysql", "mariadb"]
                        components.each { component ->
                            dir("weops/pipe-tools/exporter/${component}") {
                                sh "kubectl delete -f ./standalone -n ${component}"
                                sh "kubectl delete -f ./cluster -n ${component}"
                                sh "kubectl delete -f ./configMap -n ${component}"

                                sh "kubectl apply -f ./standalone -n ${component}"
                                sh "kubectl apply -f ./cluster -n ${component}"
                                sh "kubectl apply -f ./configMap -n ${component}"
                            }
                        }
                    }

                    dir('weops/pipe-tools/chaos') {
                        sh 'kubectl apply -f ./ '
                    }
                }
            }
        }

        stage('上传探针制品'){
            steps {
                dir("${env.BuildPath}") {
                    sh "tar -cvzf mysql_exporter_${env.GitTag}.tar.gz mysql_exporter_linux_amd64 mysql_exporter_windows_amd64.exe mysql_exporter_linux_arm64"
                    minio bucket: "release", credentialsId: "minio", excludes: "", host: "http://10.10.25.66:9000/", includes: "mysql_exporter_${env.GitTag}.tar.gz", targetFolder: "monitor_plugin/mysql/binary"
                    }
                }
            }
        }
    }