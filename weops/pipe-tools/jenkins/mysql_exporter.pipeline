pipeline {
    agent {
        node('chaos')
    }

    parameters {
       string(name: 'BranchName', defaultValue: 'dev', description: null)
       string(name: 'GitTag', defaultValue: 'dev', description: null)
       string(name: 'BuildPath', defaultValue: 'weops/pipe-tools/bin', description: 'The path to build binaries')
    }

    environment {
       PATH = "/data/go/bin:${env.PATH}"
    }

    stages {
        stage('拉取代码') {
            steps {
                git url: 'https://proxy.zyun.vip/https://github.com/WeOps-Lab/mysqld_exporter', branch: "weops/${env.BranchName}"
            }
        }

        stage('重新部署监控对象') {
            steps {
                dir('weops/pipe-tools/charts') {
                    sh 'bash helm_uninstall.sh'
                    sleep 3
                    sh 'bash helm_install.sh'
                }
            }
        }

        stage('编译探针'){
            steps {
                script {
                    def buildOptions = [
                        "linux-amd64": "GOOS=linux GOARCH=amd64",
                        "windows-amd64": "GOOS=windows GOARCH=amd64",
                        "linux-arm64": "GOOS=linux GOARCH=arm64"
                    ]
                    parallel buildOptions.collectEntries { arch, options ->
                        [(arch): {
                            sh "go env -w GOPROXY=https://goproxy.cn"
                            if (arch == "linux-amd64") {
                                sh "${options} go build -o ${env.BuildPath}/mysql_exporter"
                            } else if (arch == "windows-amd64") {
                                sh "${options} go build -o ${env.BuildPath}/mysql_exporter.exe"
                            } else if (arch == "linux-arm64") {
                                sh "${options} go build -o ${env.BuildPath}/mysql_exporter_arm64"
                            }
                        }]
                    }
                }
            }
        }

        stage('构建镜像') {
            steps {
                dir("${env.BuildPath}") {
                    sh 'docker build --no-cache  -f ../docker/Dockerfile -t registry-svc:25000/library/mysql-exporter:latest .'
                }
            }
        }

        stage('推送镜像') {
            steps {
                sh 'docker push registry-svc:25000/library/mysql-exporter:latest'
            }
        }

        stage('生成部署文件') {
            steps {
                dir('weops/pipe-tools/exporter/mysql/template') {
                    sh 'bash build.sh'
                }

                dir('weops/pipe-tools/exporter/mariadb/template') {
                    sh 'bash build.sh'
                }
            }
        }

        stage('部署探针和混沌工程') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'chaos', namespace: '', serverUrl: 'https://10.10.90.113:6443') {
                    dir('weops/pipe-tools/exporter/mysql') {
                        sh 'kubectl apply --force -f ./standalone -n mysql'
                        sh 'kubectl apply --force -f ./cluster -n mysql'
                        sh 'kubectl apply --force -f ./configMap -n mysql'

                        sh 'kubectl get statefulsets -n mysql -o name | xargs kubectl rollout restart -n mysql'
                        sh 'kubectl get deployment -n mysql -o name | xargs kubectl rollout restart -n mysql'
                    }

                    dir('weops/pipe-tools/exporter/mariadb') {
                        sh 'kubectl apply --force -f ./standalone -n mariadb'
                        sh 'kubectl apply --force -f ./cluster -n mariadb'
                        sh 'kubectl apply --force -f ./configMap -n mariadb'

                        sh 'kubectl get statefulsets -n mariadb -o name | xargs kubectl rollout restart -n mariadb'
                        sh 'kubectl get deployment -n mariadb -o name | xargs kubectl rollout restart -n mariadb'
                    }

                    dir('weops/pipe-tools/chaos') {
                        sh 'kubectl apply -f ./ '
                    }
                }
            }
        }

        stage('上传探针制品'){
            steps {
                dir("${env.BuildPath}") {
                    sh "tar -cvzf mysql_exporter_${env.GitTag}.tar.gz mysql_exporter mysql_exporter.exe mysql_exporter_arm64"
                    minio bucket: "release", credentialsId: "minio", excludes: "", host: "http://10.10.25.66:9000/", includes: "mysql_exporter_${env.GitTag}.tar.gz", targetFolder: "monitor_plugin/mysql/binary"
                }
            }
        }
    }
}
